#include <iostream>
#include <stdlib.h>
using namespace std;
struct node
{
    struct node *next;
    int data;
}*top=NULL;
void push(int x)
{
    struct node *t;
    t=new node;
    if(t==NULL)
    cout<<"Stack is full";
    else
    {
        t->data=x;
        t->next=top;
        top=t;
    }
}
int pop()
{
    struct node *temp;
    int x=-1;
    if(top==NULL)
    cout<<"Stack is empty";
    else
    {
        temp=top;
        top=top->next;
        x=temp->data;
        delete temp;
    }
    return x;
}

int isBalanced(string exp)
{
    int i;
    for(i=0;exp[i]!='\0';i++)
    {
        if(exp[i]=='(')
        push(exp[i]);
        else if(exp[i]==')')
        {
            if(top==NULL)
            {
                return 0;
            }
            pop();
        }
        ;
    }
    if(top==NULL)
    return 1;
    else
    return 0;
}
int pre(char x)
{
    if(x=='+' || x=='-')
    return 1;
    else if(x=='*'||x=='/')
    return 2;
    return 0;
}
int isoperand(char C)
{
    if(C=='+'||C=='-'||C=='*'||C=='/')
    return 0;
    else 
    return 1;
}

int eval(string postfix)
{
    int i=0,x1,x2,r;
    for(i=0;postfix[i]!='\0';i++)
    {
        if(isoperand(postfix[i]))
        push(postfix[i]-'0');
        else
        {
            x2=pop(); x1=pop();
            switch(postfix[i])
            {
                case '+':r=x1+x2; break;
                case '-':r=x1-x2; break;
                case '*':r=x1*x2; break;
                case '/':r=x1/x2; break;
            }
            push(r);
        }
    }
    return top->data;
}
int main() 
{
   
   string postfix="234*+82/-";
   push('#');
  cout<<eval(postfix);
	return 0;
}
********************************************************************************************************************
output
10
