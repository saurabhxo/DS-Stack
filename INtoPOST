#include <iostream>
#include <stdlib.h>
using namespace std;
struct node
{
    struct node *next;
    char data;
}*top=NULL;
void push(char x)
{
    struct node *t;
    t=new node;
    if(t==NULL)
    cout<<"Stack is full";
    else
    {
        t->data=x;
        t->next=top;
        top=t;
    }
}
char pop()
{
    struct node *temp;
    char x=-1;
    if(top==NULL)
    cout<<"Stack is empty";
    else
    {
        temp=top;
        top=top->next;
        x=temp->data;
        delete temp;
    }
    return x;
}

int isBalanced(string exp)
{
    int i;
    for(i=0;exp[i]!='\0';i++)
    {
        if(exp[i]=='(')
        push(exp[i]);
        else if(exp[i]==')')
        {
            if(top==NULL)
            {
                return 0;
            }
            pop();
        }
        ;
    }
    if(top==NULL)
    return 1;
    else
    return 0;
}
int pre(char x)
{
    if(x=='+' || x=='-')
    return 1;
    else if(x=='*'||x=='/')
    return 2;
    return 0;
}
int isoperand(char C)
{
    if(C=='+'||C=='-'||C=='*'||C=='/')
    return 0;
    else 
    return 1;
}
char intopostfix(string infix)
{
    int n,i=0,j=0;
    n=infix.length();
    char postfix[n+2];
    while(infix[i]!='\0')
    {
        if(isoperand(infix[i]))
        postfix[j++]=infix[i++];
        else
        {
            if(pre(infix[i])>pre(top->data))
            push(infix[i++]);
            else
            postfix[j++]=pop();
        }
    }
    while(top!=NULL)
    postfix[j++]=pop();
    postfix[j]='\0';
    for(i=0;i<n;i++)
    cout<<postfix[i];
}
int main() 
{
   
   string infix="a+b*c/d";
   push('#');
   intopostfix(infix);
	return 0;
}
